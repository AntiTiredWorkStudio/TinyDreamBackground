<?php
//引用此页面前需先引用conf.php
error_reporting(E_ALL ^ E_DEPRECATED);

LIB('db');
LIB('dp');
LIB('us');
LIB('ub');
define("DEFAULT_PAGE_SIZE",5);
define("DEFAULT_START_SEEK",0);
class BackgroundController extends DBManager {
    public $pages = [
        'postDream'=>['id'=>'post','title'=>'发布梦想池','path'=>'admin/view/postdream.php'],
        'verify'=>['id'=>'verf','title'=>'审核','path'=>'admin/view/verify.php'],
        'datas'=>['id'=>'data','title'=>'数据','path'=>'admin/view/data.php'],
        'navi'=>['id'=>'nav','title'=>'导航栏','path'=>'admin/view/navagator.php'],
		'personalinfo'=>['id'=>'pinf','title'=>'个人信息块','path'=>'admin/view/personalinfo.php'],
    ];
    public function info()
    {
        return "BackgroundController"; // TODO: Change the autogenerated stub
    }

    public $navigateList = [
        'a_post'=>['title'=>'发布梦想池','class'=>'lnr lnr-home'],
        'a_verify'=>['title'=>'中标用户审核','class'=>'lnr lnr-pencil'],
        'a_data'=>['title'=>'访问数据统计','class'=>'lnr lnr-dice'],
    ];
    public function BuildNavigatorList(){
        return $this->navigateList;
    }

    public function BuildNavigator(){
        $pageData = $this->pages['navi'];
        $pageData['navList'] = $this->BuildNavigatorList();
        require ($pageData['path']);
    }


    //引用发布梦想池
    public function BuildPostDream(){
        $pageData = $this->pages['postDream'];
        $DPM = new DreamPoolManager();
        $pageData['count'] = $DPM->CountPools()['count'];
        $pageData['psize'] = (isset($_REQUEST['psize']))?$_REQUEST['psize']:DEFAULT_PAGE_SIZE;
        $pageData['seek'] = (isset($_REQUEST['seek']))?$_REQUEST['seek']:DEFAULT_START_SEEK;

        $pageData['pages'] = ceil($pageData['count']/$pageData['psize']);
        $pageData['pools'] = $DPM->ListPoolsByRange($pageData['seek'],$pageData['psize'])['Pools'];

        require ($pageData['path']);
    }

    //审核结果
    public function BuildVerify(){
        $pageData = $this->pages['verify'];
		
		
		$btn_submit_style = 'btn disable';
		$btn_unsubmit_style = 'btn disable';
		$btn_lose_style = 'btn disable';
		$tab = 'submit';
		if(isset($_REQUEST['tab'])){
			$tab = $_REQUEST['tab'];
			switch($_REQUEST['tab']){
				case 'submit':
					$btn_submit_style = 'btn btn-primary';
					break;
				case 'unsubmit':
					$btn_unsubmit_style = 'btn btn-primary';
					break;
				case 'lose':
					$btn_lose_style = 'btn btn-primary';
					break;
				default:
					$btn_submit_style = 'btn btn-primary';
					break;
			}
		}else{
			$btn_submit_style = 'btn btn-primary';
		}
		$pageData['btnStyle'] = [
			'submit'=>$btn_submit_style,
			'unsubmit'=>$btn_unsubmit_style,
			'lose'=>$btn_lose_style
		];
		
		
        $USM = new UserManager();
        $result = $USM->ViewAllVerifyInfox($tab);

        if($result['result'] == 'true'){
            $pageData['verify'] = $result['verify'];
        }
		
        require ($pageData['path']);
    }
	
	public function BuildPersonalInfo($uid){
        $pageData = $this->pages['personalinfo'];
        $USM = new UserManager();
		$selfInfo = UserManager::GetUserInfo($uid);
		$pageData['selfInfo'] = $selfInfo;
        require ($pageData['path']);
	}
	
	public function BuildDatas(){
        $pageData = $this->pages['datas'];
		
		$uBehaviour = new UserBehaviourManager();
        $pageData['recs'] = $uBehaviour->GetRecordsRecordsByRange(0,20)['recs'];
		
        require ($pageData['path']);
	}

	public function BackgroundController(){
		
	}
}
?>