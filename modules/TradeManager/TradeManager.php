<?php
//引用此页面前需先引用conf.php
error_reporting(E_ALL ^ E_DEPRECATED);
LIB('aw');
LIB('dp');
LIB('view');

class TradeManager extends DBManager {
    public function info()
    {
        return "TradeManager".self::GenerateTradeID(); // TODO: Change the autogenerated stub
    }

    //生成小生意id号
    public static function GenerateTradeID(){
        $DRM = new DreamManager();
        return 'TR'.(1000000000 + $DRM->CountTableRow($DRM->TName('tTrade')));
    }

	public function TradeManager(){

	}

	//获取交易中奖信息
	public static function TradeAwardingInfo($uid){
        $TM = new TradeManager();
        $awardInfo = DBResultToArray($TM ->SelectDataByQuery($TM->TName('tAward'),
            self::C_And(
                self::FieldIsValue('uid',$uid),
                self::C_And(
                    self::FieldIsValue('imgurl',''),
                    self::FieldLikeValue('did','TR%')
                )
            )
        ),true);
        if(!empty($awardInfo)){
            $awardInfo = $awardInfo[0];//中奖信息
            $trade = self::GetTradeInfoByPid($awardInfo['pid']);
            $awardInfo['trade'] = $trade;//交易信息
            /*$AWM = new AwardManager();
            $AWM->ActivityEnd($awardInfo['pid'],"true");*/
            return $awardInfo;
        }else{
            return [];
        }
    }

    //通过条件字符串批量获取小生意
    public static function GetDreamsByConditionStr($tidStr){
        $TM = new TradeManager();
        $trades = DBResultToArray($TM->SelectDatasFromTable($TM->TName('tTrade'),['tid'=>$tidStr]));
        return $trades;
    }

    public function GetTradeByPid($pid){
        return self::GetTradeInfoByPid($pid);
    }
    public function GetTradeByTid($tid){
        return self::GetTradeInfoByTid($tid);
    }

	public static function GetTradeInfoByPid($pid){
        $TM = new TradeManager();
        $result = DBResultToArray(
            $TM->SelectDataByQuery($TM->TName('tTrade'),
            self::FieldIsValue('pid',$pid)
            ),true
        );
        if(!empty($result)){
            $result = $result[0];
            $result['bannerUrl'] = SnippetManager::GetAttributeFromData($result['url'],"bannerImgUrl");
            $result['awardTitle'] = SnippetManager::GetAttributeFromData($result['url'],"awardTitle");
        }
        return $result;
    }

    public static function GetTradeInfoByTid($tid){
        $TM = new TradeManager();
        $result = DBResultToArray(
            $TM->SelectDataByQuery($TM->TName('tTrade'),
                self::FieldIsValue('tid',$tid)
            ),true
        );
        if(!empty($result)){
            $result = $result[0];
            $result['bannerUrl'] = SnippetManager::GetAttributeFromData($result['url'],"bannerImgUrl");
            $result['awardTitle'] = SnippetManager::GetAttributeFromData($result['url'],"awardTitle");
        }
        return $result;
    }

    public function TryTradePrecent($uid,$pid){
        return self::TryTradeProfitPrecent($uid,$pid);
    }

    public static function TryTradeProfitPrecent($uid,$pid){
        $TM = new TradeManager();
        $SumField = "SUM(`bill`)";

        $trade = self::GetTradeInfoByPid($pid);

        $awardUid = AwardManager::GetAwardUserByPid($pid);

        if(empty($awardUid)){
            return $awardUid;
        }


        $ownResult = DBResultToArray($TM->SelectDataByQuery($TM->TName('tOrder'),
            self::C_And(
                self::C_And(
                    self::FieldIsValue('uid',$uid),
                    self::FieldIsValue('pid',$pid)
                ),
                self::FieldIsValue('state','SUCCESS')
            )
            ,
            false,
            $SumField
        ),true);

        //echo self::$LastSql;

        $awardResult = DBResultToArray($TM->SelectDataByQuery($TM->TName('tOrder'),
            self::C_And(
                self::C_And(
                    self::FieldIsValue('uid',$awardUid),
                    self::FieldIsValue('pid',$pid)
                ),
                self::FieldIsValue('state','SUCCESS')
            ),
            false,
            $SumField
        ),true);

        //echo self::$LastSql;

        $otherResult = DBResultToArray($TM->SelectDataByQuery($TM->TName('tOrder'),
            self::C_And(
                self::C_And(
                    self::C_And(
                        self::FieldIsValue('uid',$uid,"!="),
                        self::FieldIsValue('uid',$awardUid,"!=")
                    ),
                    self::FieldIsValue('state','SUCCESS')
                ),
                self::FieldIsValue('pid',$pid)
            ),
            false,
            $SumField
        ),true);

        //echo self::$LastSql;


        if(!empty($ownResult)){
            $ownResult = $ownResult[0];
        }
        if(!empty($awardResult)){
            $awardResult = $awardResult[0];
        }
        if(!empty($otherResult)){
            $otherResult = $otherResult[0];
        }

        $ownTotal = $ownResult[$SumField];
        $awardTotal = $awardResult[$SumField];
        $otherTotal = $otherResult[$SumField];
        $total = $ownTotal+$awardTotal+$otherTotal;

        $ownPrecent = 0;
        $awardPrecent = 0.5;
        $otherPrecent = 0;

        if($total == $awardTotal){
            return [
                "ownTotal"=>$ownTotal,
                "awardTotal"=>$awardTotal,
                "otherTotal"=>$otherTotal,
                "total"=>$total,
                "own"=>0,
                "award"=>1,
                "other"=>0,
                "trade"=>$trade
            ];
        }

        if($uid != $awardUid){
            $ownPrecent = round(0.5*($ownTotal/($total - $awardTotal)),4);
        }
        $otherPrecent =  round(0.5*($otherTotal/($total - $awardTotal)),4);

        return [
            "ownTotal"=>$ownTotal,
            "awardTotal"=>$awardTotal,
            "otherTotal"=>$otherTotal,
            "total"=>$total,
            "own"=>$ownPrecent,
            "award"=>$awardPrecent,
            "other"=>$otherPrecent,
            "trade"=>$trade
        ];
    }

    public static function GetTradeProfitPercent($uid,$pid){
        $TM = new TradeManager();
        $SumField = "SUM(`bill`)";

        $trade = self::GetTradeInfoByPid($pid);

        $awardUid = AwardManager::GetAwardUserByPid($pid);

        if(empty($awardUid)){
            return $awardUid;
        }

        $ownResult = DBResultToArray($TM->SelectDataByQuery($TM->TName('tOrder'),
            self::C_And(
                self::C_And(
                    self::FieldIsValue('uid',$uid),
                    self::FieldIsValue('pid',$pid)
                ),
                self::FieldIsValue('state','SUCCESS')
            )
            ,
            false,
            $SumField
        ),true);

        $awardResult = DBResultToArray($TM->SelectDataByQuery($TM->TName('tOrder'),
            self::C_And(
                self::C_And(
                    self::FieldIsValue('uid',$awardUid),
                    self::FieldIsValue('pid',$pid)
                ),
                self::FieldIsValue('state','SUCCESS')
            ),
            false,
            $SumField
        ),true);

        $otherResult = DBResultToArray($TM->SelectDataByQuery($TM->TName('tOrder'),
            self::C_And(
                self::C_And(
                    self::C_And(
                        self::FieldIsValue('uid',$uid,"!="),
                        self::FieldIsValue('uid',$awardUid,"!=")
                    ),
                    self::FieldIsValue('state','SUCCESS')
                ),
                self::FieldIsValue('pid',$pid)
            ),
            false,
            $SumField
        ),true);


        if(!empty($ownResult)){
            $ownResult = $ownResult[0];
        }
        if(!empty($awardResult)){
            $awardResult = $awardResult[0];
        }
        if(!empty($otherResult)){
            $otherResult = $otherResult[0];
        }

        $ownTotal = $ownResult[$SumField];
        $awardTotal = $awardResult[$SumField];
        $otherTotal = $otherResult[$SumField];
        $total = $ownTotal+$awardTotal+$otherTotal;

        $ownPrecent = 0;
        $awardPrecent = 0.5;
        $otherPrecent = 0;

        if($total == $awardTotal){
            return [
                "own"=>0,
                "award"=>1,
                "other"=>0,
                "trade"=>$trade
            ];
        }

        if($uid != $awardUid){
            $ownPrecent = round(0.5*($ownTotal/($total - $awardTotal)),4);
        }
        $otherPrecent =  round(0.5*($otherTotal/($total - $awardTotal)),4);

        return [
            "own"=>$ownPrecent,
            "award"=>$awardPrecent,
            "other"=>$otherPrecent,
			"trade"=>$trade
            ];

    }

    public function GetTradePPer($uid,$pid){
        return self::GetTradeProfitPercent($uid,$pid);
    }

	//增加小生意信息
	public function AddTradeInfo($title,$url,$profit,$ubill){
        $tid = self::GenerateTradeID();//生成生意ID
        $pid = DreamPoolManager::GeneratePoolIDAuto();
        $this->InsertDataToTable($this->TName('tTrade'),
            [
                'tid'=>$tid,
                'pid'=>$pid,
                'title'=>$title,
                'url'=>$url,
                'profit'=>$profit
            ]
        );
        DreamPoolManager::AddTradePool($pid,$profit,$ubill);
        return RESPONDINSTANCE('0');
    }

}
?>