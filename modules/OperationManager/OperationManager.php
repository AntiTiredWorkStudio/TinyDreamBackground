<?php
//引用此页面前需先引用conf.php
error_reporting(E_ALL ^ E_DEPRECATED);

LIB('db');
LIB('co');
LIB('ds');
LIB('us');
define("DAY_TIME",86400);

class OperationManager extends DBManager{
    public function info()
    {
        /*echo json_encode(self::GetUserAttendence('172840897566','2019-04-10'));
        echo self::$LastSql;*/
        return "OperationManager"; // TODO: Change the autogenerated stub
    }

	public function OperationManager(){
		
	}


	//生成行动ID
    public static function GenerateOperationID(){
        $OPM = new OperationManager();
        //生成订单号
        do{
            $newOrderID = 100000000000+((PRC_TIME()%999999).(rand(10000,99999)));
        }while($OPM->SelectDataFromTable('tOperation',['oid'=>$newOrderID,'_logic'=>' ']));
        return $newOrderID;
    }
	
	//生成打卡ID
    public static function GenerateAttendenceID($opid,$timeStamp){
        $OPM = new OperationManager();
        //生成订单号
        $AttendenceID = (999999+($opid%1000000)).date("Ymd",DAY_START_FLOOR($timeStamp));
        if($OPM->SelectDataFromTable('tAttend',['atid'=>$AttendenceID,'_logic'=>' '])){
			return "";
		}
        return $AttendenceID;
    }

	//创建合约实例
	public static function CreateContractInstance($cid,$uid,$theme){
        $tContract = ContractManager::GetContractInfo($cid);
        if(empty($tContract)){//判断存在合约
            return [];
        }
        $OPM = new OperationManager();
		
		$timeStamp = PRC_TIME();
        $operation = [
            "opid"=>self::GenerateOperationID(),
            "uid"=>$uid,
            "cid"=>$cid,
            "starttime"=>DAY_START_CELL($timeStamp),
            "lasttime"=>0,
            "theme"=>$theme,
            "alrday"=>0,
            "conday"=>0,
            "misday"=>0,
            "menday"=>0,
            "menchance"=>0,
            "invcount"=>0,
            "state"=>"DOING",
        ];
		$OPM->InsertDataToTable($OPM->TName('tOperation'),$operation);
		return $operation;
    }

    //创建打卡记录实例
    public static function CreateAttendenceInstance($opid,$uid,$currentTimeStamp,$dateString="",$state="NOTRELAY"){
        $OPM = new OperationManager();
        $dateString = ($dateString=="")?date("Y-m-d",$currentTimeStamp):$dateString;//时间戳时间
        $atid = self::GenerateAttendenceID($opid,$currentTimeStamp);
        //生成打卡记录数据
        $attendanceArray = [
            "atid"=>$atid,
            "opid"=>$opid,
            "uid"=>$uid,
            "time"=>$currentTimeStamp,
            "date"=>$dateString,
            "state"=>$state,
        ];
        $result = $OPM->InsertDataToTable($OPM->TName('tAttend'),$attendanceArray);
        return ['result'=>$result,'value'=>$attendanceArray];
    }
	
	//获取用户正在参加的行动
	public static function UserDoingOperation($uid){
        $OPM = new OperationManager();
        $targetOperation = DBResultToArray(
            $OPM->SelectDataByQuery(
                $OPM->TName('tOperation'),
                self::C_And(
                    self::FieldIsValue('uid',$uid),
                    self::FieldIsValue('state','DOING')
                )
            ),true
        );
		if(!empty($targetOperation)){
			$targetOperation = $targetOperation[0];
		}
		return $targetOperation;
    }

    //通过日期获取用户打卡记录(日期格式Y-m-d)
    public static function GetUserAttendence($opid,$date){
        $OPM = new OperationManager();
        return DBResultToArray($OPM->SelectDataByQuery($OPM->TName('tAttend'),
            self::C_And(
                self::FieldIsValue('opid',$opid),
                self::FieldIsValue('date',$date)
            )
        ),true);
    }

    //用户补卡条件判断
    public static function DoOperationPatchAttendence($opid){
        $OPM = new OperationManager();
        $menchanceOperation = DBResultToArray($OPM->SelectDataByQuery($OPM->TName('tOperation'),
            self::Limit(
                self::OrderBy(
                    self::C_And(
                        self::FieldIsValue('opid',$opid),
                        self::FieldIsValue('menchance',0,'>')
                    ),
                    'starttime','ASC'
                ),0,1
            )
        ),true);//查找有补卡机会的Operation
        if(empty($menchanceOperation)){
            return false;
        }
        $OPM->UpdateDataByQuery($OPM->TName('tOperation'),
            self::SqlField('menchance').'='.self::Symbol(self::SqlField('menchance'),'1','-')
            ,self::FieldIsValue('opid',$menchanceOperation['opid']));
        return true;
    }

    //参加合约，点击参加按钮时调用
	public function JoinContract($cid,$uid){
        $tContract = ContractManager::GetContractInfo($cid);
        if(empty($tContract)){//判断存在合约
            return RESPONDINSTANCE('81',$cid);
        }

        $userOperation = self::UserDoingOperation($uid);
        if(!empty($userOperation)){//判断无正在进行的行动
            return RESPONDINSTANCE('82');
        }

        if(!UserManager::IdentifyTeleUser($uid)){//判断用户绑定手机
            return RESPONDINSTANCE('11');
        }

        DreamServersManager::ClearSubmitOrder($uid);//清除用户未支付订单

        $orderInfo = DreamServersManager::GenerateEmptyOrder($uid,"",$tContract['cid'],3);//创建空订单

        $unifiedInfo = DreamServersManager::UnifiedOrder($orderInfo['oid'],$tContract['price'],$uid);//统一下单

        if($unifiedInfo['result'] != 0){
            return $unifiedInfo;
        }

        $backMsg = RESPONDINSTANCE('0');

        $backMsg['order'] = $orderInfo;
        $backMsg['pay'] = $unifiedInfo;
        return $backMsg;
    }

    //完成支付后成功参与合约，创建行动实例
    public function JoinContractComplete($cid,$oid,$uid,$theme){
        //完成订单
        if(!DreamServersManager::OrderFinished($oid,['state'=>'SUCCESS'])){
            return RESPONDINSTANCE('20');
        }

        //创建行动实例
        $operation = self::CreateContractInstance($cid,$uid,$theme);

        if(empty($operation)){
            return RESPONDINSTANCE('83');
        }
		
		$backMsg = RESPONDINSTANCE('0');
		$backMsg['operation'] = $operation;
		return $backMsg;
    }

    //获取行动日历
    public function OperationCalendar($uid){
        $currentOperation = self::UserDoingOperation($uid);//获取用户正在进行的行动
        if(empty($currentOperation)){//行动结束或为找到行动
            return RESPONDINSTANCE('87');
        }
        $seek = -1;
        if(isset($_REQUEST['seek'])){
            $seek = $_REQUEST['seek'];
        }
        $calendar = ContractManager::GetMonthList($currentOperation['starttime'],"CO0000000002",$seek);
        $dateList = [];
        $calendarDateIndexList = [];
        foreach ($calendar['days'] as $key=>$item) {
            $calendar['days'][$key]['state'] = 'NONE';
            $calendarDateIndexList[$item['date']] = $key;
            array_push($dateList,$item['date']);
        }

        $attendenceList = DBResultToArray($this->SelectDataByQuery($this->TName('tAttend'),
            self::C_And(
                self::FieldIsValue('uid',$uid),
                self::FieldIsValue('date',self::LogicString($dateList))
            ),false,
            self::LogicString(
                [
                    self::SqlField('atid'),
                    self::SqlField('state'),
                    self::SqlField('date')
                ],
                ','
            )
        ),true);
        foreach ($attendenceList as $item) {
            if(isset($calendarDateIndexList[$item['date']])){
                $index = $calendarDateIndexList[$item['date']];
                $calendar['days'][$index]['atid'] = $item['atid'];
                $calendar['days'][$index]['state'] = $item['state'];
            }
        }
        $calendar['opid'] = $currentOperation['opid'];

        $backMsg = RESPONDINSTANCE('0');
        $backMsg['calendar'] = $calendar;
        return $backMsg;
    }

    //按日期补卡
    public function PatchAttendance($uid,$date){
        $currentTimeStamp = PRC_TIME();
        $todayStamp = DAY_START_FLOOR($currentTimeStamp);
        $currentOperation = self::UserDoingOperation($uid);//获取用户正在进行的行动
        if(empty($currentOperation)){//行动结束或为找到行动
            return RESPONDINSTANCE('87');
        }
        $startAttendanceTime = $currentOperation['starttime'];//起始日期时间戳
        $targetTime = strtotime($date);

        if($targetTime<$todayStamp && $targetTime>$startAttendanceTime){//判断补卡时间范围
            $targetAttendence = self::GetUserAttendence($currentOperation['opid'],$date);
            $missAttendence = empty($targetAttendence);//当日漏打卡
            $missRelay = (!empty($targetAttendence) && $targetAttendence['state']=="NOTRELAY");//当日漏转发
            if($missAttendence || $missRelay){
                //在时间范围
                if(self::DoOperationPatchAttendence($currentOperation['opid'])){//有补卡次数并且成功扣除补卡次数
                    //执行补卡动作,
                    if($missAttendence){
                        //添加打卡记录
                        $supplyResult = self::CreateAttendenceInstance($currentOperation['opid'],$uid,$currentTimeStamp,$date,'SUPPLY');
                        if($supplyResult['result']){
                            $backMsg = RESPONDINSTANCE('0');
                            $backMsg['attendance'] = $supplyResult['value'];
                            return $backMsg;
                        }else{
                            return RESPONDINSTANCE('91');
                        }
                    }
                    if($missRelay){
                        //修改打卡记录状态
                        $this->UpdateDataToTableByQuery($this->TName('tAttend'),['state'=>'SUPPLY'],self::FieldIsValue('opid',$currentOperation['opid']));
                        $backMsg = RESPONDINSTANCE('0');
                        return $backMsg;
                    }
                }else{
                    return RESPONDINSTANCE('89');//补卡次数不足
                }
            }else {
                return RESPONDINSTANCE('90',$date);//当前日期无需补卡
            }
        }else{
            return RESPONDINSTANCE('88');//补卡不在时间范围
        }
    }

    //转发成功
    public function Reply(){

    }
	
	//打卡
	public function MakeAttendance($opid,$uid){
		$currentTimeStamp = PRC_TIME()+DAY_TIME*0;//时间戳
		$dateString = date("Y-m-d",$currentTimeStamp);//时间戳时间
		
		$currentOperation = self::UserDoingOperation($uid);//获取用户正在进行的行动
		if(empty($currentOperation)){//行动结束或为找到行动
			return RESPONDINSTANCE('87');
		}
		if($currentOperation['opid'] != $opid){//获取并验证行动数据
			return RESPONDINSTANCE('85');
		}
		
		$currentContract = ContractManager::GetContractInfo($currentOperation['cid']);//获取合约规则
		$backrule = $currentContract['backrule'];
		$attrule = $currentContract['attrule'];
		
		/*
		 * 从行动中获取数据
		 */
		$startAttendanceTime = $currentOperation['starttime'];//起始日期时间戳
		
		$endAttendanceTime = $startAttendanceTime+$currentContract['durnation']*DAY_TIME;//结束日期时间戳
		//echo date("Y-m-d",$startAttendanceTime).'/'.date("Y-m-d H:i:s",$endAttendanceTime);
		
		//最后一次打卡当天时间戳
        $nextAttendanceTime = DAY_START_CELL($currentOperation['lasttime']);//求下一次打卡日期的时间戳
		$alrday = $currentOperation['alrday'];//已经打卡天数
		$conday = $currentOperation['conday'];//连续打卡天数
		$misday = $currentOperation['misday'];//漏卡天数
		$state = $currentOperation['state'];//行动状态
		
		if($currentTimeStamp<$startAttendanceTime){//未到开始打卡时间
            return RESPONDINSTANCE('86',date('Y-m-d H:i:s',$startAttendanceTime)."当前时间:".date('Y-m-d H:i:s',$currentTimeStamp));
		}
		
		//计算时间变化量
		if($currentOperation['lasttime']==0){//未打过卡
			$deltaTime = $currentTimeStamp - $startAttendanceTime;
		}else{//打过卡
			$deltaTime = $currentTimeStamp - $nextAttendanceTime;
		}
		if($deltaTime<0){
			//今日已打卡
			return RESPONDINSTANCE('84',$dateString);
		}
//		NORMAL类型数值直接处理
		if($attrule=="NORMAL"){
			//依据变化量判断打卡结果
			if($deltaTime <= DAY_TIME){
				//打卡成功,连续打卡+1
				$alrday++;//已经打卡天数+1
				$conday++;//连续打卡天数+1
				/*依据规则退款*/
			}else if($deltaTime>DAY_TIME){
				//打卡成功,中间有漏天
				$mis = floor($deltaTime/DAY_TIME);
				$alrday++;//已经打卡天数+1
				$conday=1;//重置连续打卡天数
				$misday=$misday+$mis;//增加漏卡天数
			}
		}
		
		/*判断行动是否结束*/
		$nextWillAttendanceTime = DAY_START_CELL($currentTimeStamp);
		if($nextWillAttendanceTime >= $endAttendanceTime){//打卡结束下一天的0点>=结束日期的0点
			$state = "SUCCESS";
			if($alrday >= $currentContract['durnation'] && $misday<=0){//连续打卡天数达到要求且无漏卡
				/*依据规则退款*/
				$state = "SUCCESS";//行动成功
			}else{
				$state = "FAILED";//行动失败
			}
		}
		
		
		//更新数据
		$updateInfo = [
			"alrday"=>$alrday,
			"conday"=>$conday,
			"misday"=>$misday,
			"lasttime"=>$currentTimeStamp,
			"state"=>$state
		];
		
		//更新行动数据
		$this->UpdateDataToTableByQuery($this->TName('tOperation'),$updateInfo,
			self::FieldIsValue('opid',$opid)
		);
		
		$atid = self::GenerateAttendenceID($opid,$currentTimeStamp);
		//生成打卡记录数据
		$attendanceArray = [
			"atid"=>$atid,
			"opid"=>$opid,
			"uid"=>$uid,
			"time"=>$currentTimeStamp,
			"date"=>$dateString,
			"state"=>"NOTRELAY",
		];
		$result = $this->InsertDataToTable($this->TName('tAttend'),$attendanceArray);
		
		if(!$result){//已经打卡
			return RESPONDINSTANCE('84',$dateString.",插入问题");
		}
		
		$backMsg = RESPONDINSTANCE('0');
		$backMsg['attendance'] = $attendanceArray;//打卡记录数据
		$backMsg['operation'] = $updateInfo;//行动更新数据
		return $backMsg;
	}
}
?>