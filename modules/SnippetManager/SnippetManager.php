<?php
//引用此页面前需先引用conf.php
error_reporting(E_ALL ^ E_DEPRECATED);
LIB('utils');


class SnippetManager extends Manager{
    public function info()
    {
		$t = JsonObject::Create()->Load(
			$this->config['templatePath'].'/test.json'
		)->Write(
			function($data){
				$data['t'] = [
					'aaa'=>'0001'
				];
				return $data;
			}
		)->Release();
        return "SnippetManager"; // TODO: Change the autogenerated stub
    }
	
	public $config = [
		'viewPath'=>'../TinydreamWeb/view',
        'templatePath'=>'../TinydreamUConfig',//默认模板路径
	];

	public function SnippetManager(){
		$this->config = isset($GLOBALS['options']['snippet'])?$GLOBALS['options']['snippet']:$this->config;
	}
	
	public function BuildSnippets($datas){
		$path = $this->config['viewPath'];
		if(isset($_REQUEST['url'])){
			$path=$_REQUEST['url'];
		}
		$result = [];
		$datas = json_decode($datas,true);
		foreach($datas as $data){
			$result[$data['name']] = $this->SingleSnippet($path,$data['name'],json_encode($data['data']));
		}
		$backMsg = RESPONDINSTANCE('0');
		$backMsg['snippet']=$result;
		return $backMsg;
	}
	
	public function SingleSnippet($path,$name,$data){
		$fullPath = $path.'/'.$name;
		$endfix = substr($fullPath,strrpos($fullPath,'.')+1);
		if($endfix != 'html'){
			$fullPath = $fullPath.'.html';
		}
		$data = json_decode($data,true);
		if(!file_exists($fullPath)){
			return "未定义:'".$name."'#LB#/br#RB#";
		}
		$template = file_get_contents($fullPath);
		$result = '';
		if(is_array($data)){
			foreach($data as $seek=>$index){
				$current = $template;
				foreach($index as $key=>$value){
					if(is_array($value)){
						if(isset($value['sub']) && isset($value['data'])){
							$current = str_replace("{{{$key}}}",$this->SingleSnippet($path,$value['sub'],json_encode($value['data'])),$current);
						}else{
							$current = str_replace("{{{$key}}}",json_encode($value),$current);
						}
					}else{
						$current = str_replace("{{{$key}}}",$value,$current);
					}
				}
				$result = $result.$current;
			}
		}else{
			$current = $template;
			foreach($data as $key=>$value){
				if(is_array($value)){
					if(isset($value['sub']) && isset($value['data'])){
						$current = str_replace("{{{$key}}}",$this->SingleSnippet($path,$value['sub'],json_encode($value['data'])),$current);
					}else{
						$current = str_replace("{{{$key}}}",json_encode($value),$current);
					}
				}else{
					$current = str_replace("{{{$key}}}",$value,$current);
				}
			}
			$result = $result.$current;
		}
		$result = str_replace("<","#LB#",$result);
		$result = str_replace(">","#RB#",$result);
		return $result;
	}
	
	public function BuildSnippet($name,$data){
		$path = $this->config['viewPath'];
		if(isset($_REQUEST['url'])){
			$path=$_REQUEST['url'];
		}
		$backMsg = RESPONDINSTANCE('0');
		$backMsg['snippet'][$name]=$this->SingleSnippet($path,$name,$data);
		return $backMsg;
	}

	public static function GetAttributeFromData($turl,$key){
        $templatePath = (new SnippetManager())->config['templatePath'];

        $fullPath = $templatePath.'/'.$turl.'.php';

        $data = [];

        if(isset($_REQUEST['root'])){
            $templatePath = $_REQUEST['root'];
        }


        if(!file_exists($fullPath)){
            return RESPONDINSTANCE('77',$turl)['context'];
        }
        include($fullPath);
		
        return $data[$key];

    }
	
    //获取模板列表
	public static function GetTemplateList(){
		$SM = new SnippetManager();
		return $SM->TemplateList()['list'];
	}

    //获取模板列表
    public function TemplateList(){
        $templatePath = $this->config['templatePath'];
        $file = scandir($templatePath);
        $list = [];
        foreach ($file as $filename) {
			$explode = explode(".",$filename);
			$end = end($explode);
           /* $endName = end(explode(".",$filename));*/
            if($end == 'php' && $filename != "pull.php"){
                array_push($list,array_shift($explode));
            }
        }
		$backMsg = RESPONDINSTANCE('0');
		$backMsg['list'] = $list;
        return $backMsg;
    }

	public function BuildTemplate($turl){
		
        $fullPath = FREE_PARS('root',$this->config['templatePath']).'/'.$turl.'.php';
		$templateUrl = FREE_PARS('root',$this->config['templatePath']).'/'.$turl.'.html';

        $data = [];

        if(!file_exists($fullPath)){
            return RESPONDINSTANCE('77',$turl);
        }

        include ($fullPath);

        if(isset($data['template']) && !empty($data['template'])){
            $templateUrl = $this->config['templatePath'].'/'.$data['template'];
        }

        if(!file_exists($templateUrl)){
            return RESPONDINSTANCE('78',$templateUrl);
        }


        $result = file_get_contents($templateUrl);

        foreach($data as $key=>$value){
            $result = str_replace("{{{$key}}}",$value,$result);
        }

        $result = str_replace("<","#LB#",$result);

        $result = str_replace(">","#RB#",$result);

        $backMsg = RESPONDINSTANCE('0');

        $backMsg['layout'] = $result;

        return $backMsg;
    }
	
	public function BuildUploadImgList($imglist){
		$GLOBALS['imglist'] = json_decode($imglist,true);
		$fullUrl = $this->config['templatePath'].'/ImgTable.json';
		$jsonObject = new JsonObject($fullUrl);
		$jsonObject->Write(
			function($data){
				$data[date("YmdHis",PRC_TIME())] = $GLOBALS['imglist'];
				unset($GLOBALS['imglist']);
				return $data;
			}
		);
		return RESPONDINSTANCE('0');
	}

	public function BuildJson($turl){
		$command = FREE_PARS('command','read');
        $fullPath = FREE_PARS('root',$this->config['templatePath']).'/'.$turl.'.json';
		$dataset = FREE_PARS('datas',[]);
		//$field = FREE_PARS('field','all');

        if($command == 'read'){
            if(!file_exists($fullPath)){
                return RESPONDINSTANCE('113','路径不存在:'.$fullPath);
            }
            $data = file_get_contents($fullPath);
            $backMsg = RESPONDINSTANCE('0');
            $backMsg['data'] = json_decode($data,true);
            return $backMsg;
        }
		if($command == 'build'){
			$data = [];
			if(file_exists($fullPath)){
				return RESPONDINSTANCE('113','路径已存在:'.$fullPath);
			}
			file_put_contents($fullPath,json_encode($data,JSON_UNESCAPED_UNICODE));
			return RESPONDINSTANCE('0');
		}
		if($command == 'write'){
			if(!file_exists($fullPath)){
				return RESPONDINSTANCE('113','路径不存在:'.$fullPath);
			}
			$data = file_get_contents($fullPath);
			$data = json_decode($data,true);
			if(!empty($dataset)){
				$dataset = json_decode($dataset,true);
				foreach($dataset as $key=>$value){
				    if(empty($value)){
				        unset($data[$key]);
                    }else{
                        $data[$key] = $value;
                    }
				}
			}
			file_put_contents($fullPath,json_encode($data,JSON_UNESCAPED_UNICODE));
			$backMsg = RESPONDINSTANCE('0');
			return $backMsg;
		}
		if($command == 'delete'){
            if(!file_exists($fullPath)){
                return RESPONDINSTANCE('113','路径不存在:'.$fullPath);
            }
		    unlink($fullPath);
            $backMsg = RESPONDINSTANCE('0');
            return $backMsg;
        }
	}
}
?>