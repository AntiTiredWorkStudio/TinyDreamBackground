<?php
//引用此页面前需先引用conf.php
error_reporting(E_ALL ^ E_DEPRECATED);

LIB('db');
LIB('us');
class DreamPoolManager extends DBManager{
    //生成梦想id号
    public static function GeneratePoolID(){
        $DPM = new DreamPoolManager();
        return (100000 + ($DPM->CountTableRow($DPM->TName('tPool'))+1));
    }

    //获取单个梦想池
    public static function Pool($pid){
        $DPM = new DreamPoolManager();
        $pools = DBResultToArray($DPM->SelectDataFromTable($DPM->TName('tPool'),
            [
                'pid'=>$pid,
                '_logic'=>' '
            ]),true);
        if(!empty($pools)){
            return $pools[0];
        }
        return $pools;
    }

    //池存在并且未完成互助
    public static function IsPoolRunning($pid){
        $DPM = new DreamPoolManager();
        return $DPM->UpdatePool($pid);
    }

    //查询首页显示的梦想信息
    public static function GetMainPool(){
        $DPM = new DreamPoolManager();
        $selresult = $DPM->SelectDataFromTable($DPM->TName('tPool'),
            [
                "state"=>'RUNNING',
                "_logic"=>' ',
                "_orderby"=>'cbill',
                "_orderrule"=>'DESC',
                "_Limfrom"=>0,
                '_Limto'=>1
            ]
        );
        $resultArray = DBResultToArray($selresult,true);
        if(!empty($resultArray) && isset($resultArray[0])){
            return $resultArray[0];
        }
        return [];
    }

    //购买梦想池支付成功后调用
    public static function BuyPoolPieceSuccess($pid,$piece){
        $DPM = new DreamPoolManager();
        $selresult = $DPM->SelectDataFromTable($DPM->TName('tPool'),
            [
                "pid"=>$pid,
                "state"=>'RUNNING',
                "_logic"=>'AND'
            ]
        );

        $array = DBResultToArray($selresult,true);
        if(empty($array)){
            return RESPONDINSTANCE('6','没有生效的梦想池'.$pid);
        }
        $array = $array[0];
        $ubill = $array['ubill'];
        $pcount = $array['pcount'];
        $cbill = $array['cbill'];
        $tbill = $array['tbill'];
        if(!$selresult){
            return RESPONDINSTANCE('5');
        }
        $cbillNext = $cbill+$piece*$ubill;
        if($cbillNext>$tbill){
            $DPM->FinishedPool($pid);
            return RESPONDINSTANCE('7');
        }
        $updateresult = $DPM->UpdateDataToTable($DPM->TName('tPool'),
        [
            'pcount'=>($pcount+$piece),
            'cbill'=>$cbillNext
        ],
        [
            "pid"=>$pid,
            "state"=>'RUNNING',
            "_logic"=>'AND'
        ]);
        if(!$updateresult){
            return RESPONDINSTANCE('6','没有生效的梦想池'.$pid);
        }
        $backMsg = RESPONDINSTANCE('0');
        $backMsg['PoolInfo'] = [
            'startIndex'=>$pcount,
            'endIndex'=>($pcount+$piece),
            'cbill'=>$cbillNext
        ];
        return $backMsg;
    }

    //刷新所有梦想池,返回被更新的梦想池的全部信息
    public static function UpdateAllPools(){
        $DPM = new DreamPoolManager();
        $poolInfo = DBResultToArray($DPM->SelectDataFromTable($DPM->TName('tPool'),['state'=>'RUNNING','_logic'=>' ']));
        $condition = '';

        $length = count($poolInfo);
        $seek = 0;

        $returnMsg = [];

        foreach ($poolInfo as $key=>$value){
            ++$seek;
            if(self::HasPoolFinished($value['ptime'],$value['duration'],$value['cbill'],$value['tbill'])){
                /*if(($seek) >= $length-1){
                    $condition = $condition.'`pid`="'.$value['pid'].'"';
                }else{*/
                $condition = $condition.'`pid`="'.$value['pid'].'" OR ';
                //}
                $returnMsg[$value['pid']]['state'] = 'FINISHED';
                $returnMsg[$value['pid']]['info'] = $value;
            }else{
                $returnMsg[$value['pid']]['state']  = 'RUNNING';
                $returnMsg[$value['pid']]['info']  = $value;
            }
        }

        $condition = substr($condition, 0, -4);
        //echo $condition;
        if(!empty($condition)){
            $DPM->UpdateDataToTableByQuery($DPM->TName('tPool'),['state'=>'FINISHED'],$condition);
        }

        return $returnMsg;
    }

    //梦想池是否完成
    static function HasPoolFinished($ptime,$duration,$cbill,$tbill){
        return (PRC_TIME()>=($ptime + $duration)) || $cbill>$tbill;
    }

    public function info()
    {
        return "梦想池模块"; // TODO: Change the autogenerated stub
    }

    public function DreamPoolManager(){
        parent::__construct();
    }

    public function ForceUpdateAllPools(){
        return self::UpdateAllPools();
    }
    //更新梦想池
    public function UpdatePool($pid){
        $poolInfo = DBResultToArray($this->SelectDataFromTable($this->TName('tPool'),['pid'=>$pid,'state'=>'RUNNING','_logic'=>'AND']));

        if(DBResultArrayExist($poolInfo)){
            $duration = $poolInfo[$pid]['duration'];
            $ptime = $poolInfo[$pid]['ptime'];
            $tbill = $poolInfo[$pid]['tbill'];
            $cbill = $poolInfo[$pid]['cbill'];
            $ubill = $poolInfo[$pid]['ubill'];


            if(self::HasPoolFinished($ptime,$duration,$cbill,$tbill)){
                $this->UpdateDataToTable($this->TName('tPool'),['state'=>'FINISHED'],['pid'=>$pid,'state'=>'RUNNING','_logic'=>'AND']);
                return RESPONDINSTANCE('5');
            }else{
                $pless = ($tbill - $cbill)/$ubill;
            }

            $backMsg = RESPONDINSTANCE('0');
            $backMsg['poolInfo'] = $poolInfo[$pid];
            $backMsg['pless'] = $pless;
            return $backMsg;
        }else{
            return RESPONDINSTANCE('5');
        }
    }

    //梦想池结束生命周期
    public function FinishedPool($pid){
        $updateresult = $this->UpdateDataToTable($this->TName('tPool'),
            [
                'state'=>'FINISHED',
            ],
            [
                "pid"=>$pid,
                "state"=>'RUNNING',
                "_logic"=>'AND'
            ]);
        if(!$updateresult){
            return RESPONDINSTANCE('6','没有生效的梦想池'.$pid);
        }
        return RESPONDINSTANCE('0');
    }

    //【请求】增加梦想池
    public function Add($ptitle,$uid,$tbill,$ubill,$duration){

        //校验身份
        if(!UserManager::CheckIdentity($uid,"User")){
            return RESPONDINSTANCE('8');
        }

        $pid = self::GeneratePoolID();
        $insresult = $this->InsertDataToTable($this->TName('tPool'),[
            "pid"=>$pid,
            "ptitle"=>$ptitle,
            "uid"=>$uid,
            "state"=>'RUNNING',
            "tbill"=>$tbill,
            "cbill"=>0,
            "ubill"=>$ubill,
            "duration"=>$duration,
            "ptime"=>PRC_TIME(),
            "pcount"=>0
        ]);
        if($insresult){
            return RESPONDINSTANCE('0');
        }else{
            return RESPONDINSTANCE('1');
        }
    }

    //【请求】获取全部梦想池
    public function ListAllPool(){
        $condArray = [];
        //DreamPoolManager::BuyPoolPieceSuccess('p01',10);
        return DBResultToArray($this->SelectDataFromTable($this->TName('tPool'),$condArray));
    }
}
?>