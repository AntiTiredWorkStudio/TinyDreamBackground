<?php
//引用此页面前需先引用conf.php
error_reporting(E_ALL ^ E_DEPRECATED);
LIB('db');

class AuthManager extends DBManager{
    public function info()
    {	
		//echo HttpGet('http://www.antit.top');
		//return self::GetSignalByRequestArray('us','102354',[],time(),'inf');
        return "AuthManager"; // TODO: Change the autogenerated stub
    }

	public function AuthManager(){
		
	}

	//生成/更新api口令
	public static function GenerateOrUpdateAuthToken($uid){
		$AM = new AuthManager();
		$secret = rand(100000,999999);
		$timeStamp = PRC_TIME();
		$result = $AM->UpdateDataToTableByQuery($AM->TName('tAuth'),['secret'=>$secret,'time'=>$timeStamp],self::FieldIsValue('uid',$uid));
		if(!$result){
			$AM->InsertDataToTable($AM->TName('tAuth'),['uid'=>$uid,'secret'=>$secret,'time'=>$timeStamp]);
		}
		return ['secret'=>$secret,'timeStamp'=>$timeStamp];
	}

    //检查请求签名
	public static function ConfirmRequest($module,$action,$requestArray){
		if(!isset($requestArray['signal'])){
			return ["result"=>false,'content'=>"签名参数错误01"];
		}
		if(!isset($requestArray['openid']) && !isset($requestArray['uid'])){
			return ["result"=>false,"content"=>"签名参数错误02"];
		}
		$signal = $requestArray['signal'];

		$userId = (isset($requestArray['openid']))?$requestArray['openid']:$requestArray['uid'];
		$AM = new AuthManager();
        $authResult = DBResultToArray($AM->SelectDataByQuery($AM->TName('tAuth'),self::FieldIsValue('uid',$userId)),true);

        if(!empty($authResult)){
            $authResult = $authResult[0];
        }else{
            return ['result'=>false,"content"=>"秘钥错误"];
        }

        $secret = $authResult['secret'];

        $tStamp = $authResult['time'];

		$checkSignal = self::GetSignalByRequestArray($secret,$requestArray,$tStamp,$action);

		if($signal == $checkSignal){
            return ["result"=>true];
        }else{
            return ["result"=>false,"content"=>"签名错误"];
        }
	}

	//计算签名
	public static function GetSignalByRequestArray($secret,$requestArray,$tStamp,$action){
        if(isset($requestArray['signal'])){
            unset($requestArray['signal']);
        }
        $checkSignal = self::ExchangeArrayToSigalString($requestArray);//明文
		$checkSignal = sha1($checkSignal.'&secret='.$secret.'&time='.$tStamp);//签名
		
		return $checkSignal;
    }
	static function ExchangeArrayToSigalString($requestArray){
		$str = '';
		foreach($requestArray as $key=>$array){
			$str = $str.$key.'='.$array.'&';
		}
		$str = substr($str, 0, -1);
		return $str;
	}


	public function CheckAuthToken($secret,$time,$openid){
        $authResult = DBResultToArray(
            $this->SelectDataByQuery(
                $this->TName('tAuth'),
                self::C_And(
                    self::FieldIsValue('uid',$openid),
                    self::FieldIsValue('secret',$secret)
                )
            ),
            true
        );

        if(!empty($authResult)){
            $authResult = $authResult[0];
            if(PRC_TIME() - $authResult['time']>86400*3){
                return RESPONDINSTANCE('65');
            }
            return RESPONDINSTANCE('0');
        }else{
            return self::C_And(
                self::FieldIsValue('uid',$openid),
                self::FieldIsValue('secret',$secret)
            );
            return RESPONDINSTANCE('64');
        }
    }
}
?>